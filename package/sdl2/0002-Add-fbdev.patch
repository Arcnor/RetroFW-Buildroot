From 5e86a82cdc57ed77d8d4ba940b1a3238d8ac694d Mon Sep 17 00:00:00 2001
From: pingflood <pingflood@gmail.com>
Date: Mon, 2 Nov 2020 11:24:32 -0300
Subject: [PATCH] Add fbdev

---
 configure                        |  33 +++++
 include/SDL_config.h.in          |   1 +
 src/video/SDL_sysvideo.h         |   1 +
 src/video/SDL_video.c            |   3 +
 src/video/fbdev/SDL_fbopengles.c |  18 +++
 src/video/fbdev/SDL_fbopengles.h |  26 ++++
 src/video/fbdev/SDL_fbvideo.c    | 231 +++++++++++++++++++++++++++++++
 src/video/fbdev/SDL_fbvideo.h    |  63 +++++++++
 8 files changed, 376 insertions(+)
 create mode 100644 src/video/fbdev/SDL_fbopengles.c
 create mode 100644 src/video/fbdev/SDL_fbopengles.h
 create mode 100644 src/video/fbdev/SDL_fbvideo.c
 create mode 100644 src/video/fbdev/SDL_fbvideo.h

diff --git a/configure b/configure
index 1c7f87e..b71c954 100755
--- a/configure
+++ b/configure
@@ -849,6 +849,7 @@ enable_video_cocoa
 enable_render_metal
 enable_video_directfb
 enable_directfb_shared
+enable_video_fbdev
 enable_video_kmsdrm
 enable_kmsdrm_shared
 enable_video_dummy
@@ -1599,6 +1600,7 @@ Optional Features:
   --enable-video-directfb use DirectFB video driver [[default=no]]
   --enable-directfb-shared
                           dynamically load directfb support [[default=yes]]
+  --enable-video-fbdev    Enable the framebuffer video backend [[default=yes]]
   --enable-video-kmsdrm   use KMSDRM video driver [[default=no]]
   --enable-kmsdrm-shared  dynamically load kmsdrm support [[default=yes]]
   --enable-video-dummy    use dummy video driver [[default=yes]]
@@ -18768,6 +18770,26 @@ $as_echo "#define SDL_AUDIO_DRIVER_SNDIO 1" >>confdefs.h
     fi
 }
 
+CheckFBDEV()
+{
+	if test x$ARCH = xlinux -a x$enable_video = xyes; then
+		# Check whether --enable-video-fbdev was given.
+if test "${enable_video_fbdev+set}" = set; then :
+  enableval=$enable_video_fbdev;
+else
+  enable_video_fbdev=yes
+fi
+
+		if test x$enable_video_fbdev = xyes; then
+			have_video=yes
+			SUMMARY_video="${SUMMARY_video} fbdev"
+
+$as_echo "#define SDL_VIDEO_DRIVER_FBDEV 1" >>confdefs.h
+
+		fi
+	fi
+}
+
 CheckFusionSound()
 {
     # Check whether --enable-fusionsound was given.
@@ -23888,6 +23910,7 @@ case "$host" in
         CheckRPI
         CheckX11
         CheckDirectFB
+        CheckFBDEV
         CheckKMSDRM
         CheckOpenGLX11
         CheckOpenGLESX11
@@ -24051,6 +24074,11 @@ $as_echo "#define SDL_TIMER_UNIX 1" >>confdefs.h
         fi
         # Set up other core UNIX files
         SOURCES="$SOURCES $srcdir/src/core/unix/*.c"
+        # Set up files for the fbdev video driver
+        if test x$enable_video_fbdev = xyes; then
+          SOURCES="$SOURCES $srcdir/src/video/fbdev/*.c"
+          $as_echo "#define SDL_VIDEO_DRIVER_FB 1" >>confdefs.h
+        fi
         ;;
     *-*-cygwin* | *-*-mingw32*)
         ARCH=win32
@@ -24252,6 +24280,11 @@ fi
         else
             SDL_LIBS="-lcygwin $SDL_LIBS"
         fi
+		# Set up files for the fbdev video driver
+		if test x$enable_video_fbdev = xyes; then
+			SOURCES="$SOURCES $srcdir/src/video/fbdev/*.c"
+			$as_echo "#define SDL_VIDEO_DRIVER_FB 1" >>confdefs.h
+		fi
         ;;
 
         *-*-beos*)
diff --git a/include/SDL_config.h.in b/include/SDL_config.h.in
index 422f47f..7ba71c7 100644
--- a/include/SDL_config.h.in
+++ b/include/SDL_config.h.in
@@ -308,6 +308,7 @@
 #undef SDL_VIDEO_DRIVER_COCOA
 #undef SDL_VIDEO_DRIVER_DIRECTFB
 #undef SDL_VIDEO_DRIVER_DIRECTFB_DYNAMIC
+#undef SDL_VIDEO_DRIVER_FBDEV
 #undef SDL_VIDEO_DRIVER_DUMMY
 #undef SDL_VIDEO_DRIVER_WINDOWS
 #undef SDL_VIDEO_DRIVER_WAYLAND
diff --git a/src/video/SDL_sysvideo.h b/src/video/SDL_sysvideo.h
index 9df71c9..bebc918 100644
--- a/src/video/SDL_sysvideo.h
+++ b/src/video/SDL_sysvideo.h
@@ -411,6 +411,7 @@ extern VideoBootStrap UIKIT_bootstrap;
 extern VideoBootStrap Android_bootstrap;
 extern VideoBootStrap PSP_bootstrap;
 extern VideoBootStrap RPI_bootstrap;
+extern VideoBootStrap FBDEV_bootstrap;
 extern VideoBootStrap KMSDRM_bootstrap;
 extern VideoBootStrap DUMMY_bootstrap;
 extern VideoBootStrap Wayland_bootstrap;
diff --git a/src/video/SDL_video.c b/src/video/SDL_video.c
index 8cf195d..e266fb5 100644
--- a/src/video/SDL_video.c
+++ b/src/video/SDL_video.c
@@ -70,6 +70,9 @@ static VideoBootStrap *bootstrap[] = {
 #if SDL_VIDEO_DRIVER_WAYLAND
     &Wayland_bootstrap,
 #endif
+#if SDL_VIDEO_DRIVER_FBDEV
+    &FBDEV_bootstrap,
+#endif
 #if SDL_VIDEO_DRIVER_VIVANTE
     &VIVANTE_bootstrap,
 #endif
diff --git a/src/video/fbdev/SDL_fbopengles.c b/src/video/fbdev/SDL_fbopengles.c
new file mode 100644
index 0000000..a88c741
--- /dev/null
+++ b/src/video/fbdev/SDL_fbopengles.c
@@ -0,0 +1,18 @@
+#include "../../SDL_internal.h"
+
+#if SDL_VIDEO_DRIVER_FBDEV && SDL_VIDEO_OPENGL_EGL
+
+#include "SDL_fbvideo.h"
+#include "SDL_fbopengles.h"
+
+/* EGL implementation of SDL OpenGL support */
+
+int FB_GLES_LoadLibrary(_THIS, const char *path) {
+	return SDL_EGL_LoadLibrary(_this, path, EGL_DEFAULT_DISPLAY, 0);
+}
+
+SDL_EGL_CreateContext_impl(FB)
+SDL_EGL_SwapWindow_impl(FB)
+SDL_EGL_MakeCurrent_impl(FB)
+
+#endif /* SDL_VIDEO_DRIVER_FBDEV && SDL_VIDEO_OPENGL_EGL */
diff --git a/src/video/fbdev/SDL_fbopengles.h b/src/video/fbdev/SDL_fbopengles.h
new file mode 100644
index 0000000..4174f99
--- /dev/null
+++ b/src/video/fbdev/SDL_fbopengles.h
@@ -0,0 +1,26 @@
+#include "../../SDL_internal.h"
+
+#ifndef _SDL_FBOPENGLES_H
+#define _SDL_FBOPENGLES_H
+
+#if SDL_VIDEO_DRIVER_FBDEV && SDL_VIDEO_OPENGL_EGL
+
+#include "../SDL_sysvideo.h"
+#include "../SDL_egl_c.h"
+
+/* OpenGLES functions */
+#define FB_GLES_GetAttribute SDL_EGL_GetAttribute
+#define FB_GLES_GetProcAddress SDL_EGL_GetProcAddress
+#define FB_GLES_UnloadLibrary SDL_EGL_UnloadLibrary
+#define FB_GLES_SetSwapInterval SDL_EGL_SetSwapInterval
+#define FB_GLES_GetSwapInterval SDL_EGL_GetSwapInterval
+#define FB_GLES_DeleteContext SDL_EGL_DeleteContext
+
+extern int FB_GLES_LoadLibrary(_THIS, const char *path);
+extern SDL_GLContext FB_GLES_CreateContext(_THIS, SDL_Window * window);
+extern int FB_GLES_SwapWindow(_THIS, SDL_Window * window);
+extern int FB_GLES_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context);
+
+#endif /* SDL_VIDEO_DRIVER_FBDEV && SDL_VIDEO_OPENGL_EGL */
+
+#endif /* _SDL_FBOPENGLES_H */
diff --git a/src/video/fbdev/SDL_fbvideo.c b/src/video/fbdev/SDL_fbvideo.c
new file mode 100644
index 0000000..a612df2
--- /dev/null
+++ b/src/video/fbdev/SDL_fbvideo.c
@@ -0,0 +1,231 @@
+#include "../../SDL_internal.h"
+
+#if SDL_VIDEO_DRIVER_FBDEV
+
+#include "../SDL_sysvideo.h"
+#include "SDL_version.h"
+#include "SDL_syswm.h"
+#include "SDL_loadso.h"
+#include "SDL_events.h"
+#include "../../events/SDL_events_c.h"
+
+#ifdef SDL_INPUT_LINUXEV
+#include "../../core/linux/SDL_evdev.h"
+#endif
+
+#include "SDL_fbvideo.h"
+#include "SDL_fbopengles.h"
+
+static int FB_Available(void) {
+	return 1;
+}
+
+static void FB_Destroy(SDL_VideoDevice *device) {
+	if (device->driverdata != NULL) {
+		device->driverdata = NULL;
+	}
+}
+
+static SDL_VideoDevice *FB_Create() {
+	SDL_VideoDevice *device;
+
+	/* Initialize SDL_VideoDevice structure */
+	device = (SDL_VideoDevice *) SDL_calloc(1, sizeof(SDL_VideoDevice));
+	if (device == NULL) {
+		SDL_OutOfMemory();
+		return NULL;
+	}
+
+	/* Setup amount of available displays and current display */
+	device->num_displays = 0;
+
+	/* Set device free function */
+	device->free = FB_Destroy;
+
+	/* Setup all functions which we can handle */
+	device->VideoInit = FB_VideoInit;
+	device->VideoQuit = FB_VideoQuit;
+	device->GetDisplayModes = FB_GetDisplayModes;
+	device->SetDisplayMode = FB_SetDisplayMode;
+	device->CreateSDLWindow = FB_CreateWindow;
+	device->CreateSDLWindowFrom = FB_CreateWindowFrom;
+#if 0
+	device->SetWindowTitle = FB_SetWindowTitle;
+	device->SetWindowIcon = FB_SetWindowIcon;
+	device->SetWindowPosition = FB_SetWindowPosition;
+	device->SetWindowSize = FB_SetWindowSize;
+	device->ShowWindow = FB_ShowWindow;
+	device->HideWindow = FB_HideWindow;
+	device->RaiseWindow = FB_RaiseWindow;
+	device->MaximizeWindow = FB_MaximizeWindow;
+	device->MinimizeWindow = FB_MinimizeWindow;
+	device->RestoreWindow = FB_RestoreWindow;
+	device->SetWindowGrab = FB_SetWindowGrab;
+#endif
+	device->DestroyWindow = FB_DestroyWindow;
+	device->GetWindowWMInfo = FB_GetWindowWMInfo;
+	device->GL_LoadLibrary = FB_GLES_LoadLibrary;
+	device->GL_GetProcAddress = FB_GLES_GetProcAddress;
+	device->GL_UnloadLibrary = FB_GLES_UnloadLibrary;
+	device->GL_CreateContext = FB_GLES_CreateContext;
+	device->GL_MakeCurrent = FB_GLES_MakeCurrent;
+	device->GL_SetSwapInterval = FB_GLES_SetSwapInterval;
+	device->GL_GetSwapInterval = FB_GLES_GetSwapInterval;
+	device->GL_SwapWindow = FB_GLES_SwapWindow;
+	device->GL_DeleteContext = FB_GLES_DeleteContext;
+
+	device->PumpEvents = FB_PumpEvents;
+
+	return device;
+}
+
+VideoBootStrap FBDEV_bootstrap = {
+	"fbdev",
+	"Linux Framebuffer Video Driver",
+	FB_Available,
+	FB_Create
+};
+
+/*****************************************************************************/
+/* SDL Video and Display initialization/handling functions                   */
+/*****************************************************************************/
+int FB_VideoInit(_THIS) {
+	SDL_VideoDisplay display;
+	SDL_DisplayMode current_mode;
+
+	SDL_zero(current_mode);
+
+	/* XXX: Hardcoded for now */
+	current_mode.w = 320;
+	current_mode.h = 240;
+	current_mode.refresh_rate = 60;
+	current_mode.format = SDL_PIXELFORMAT_RGB565;
+
+	SDL_zero(display);
+	display.desktop_mode = current_mode;
+	display.current_mode = current_mode;
+
+	SDL_AddVideoDisplay(&display);
+
+#ifdef SDL_INPUT_LINUXEV
+	if (SDL_EVDEV_Init() < 0) {
+		return -1;
+	}
+#endif
+
+	return 0;
+}
+
+void FB_VideoQuit(_THIS) {
+#ifdef SDL_INPUT_LINUXEV
+	SDL_EVDEV_Quit();
+#endif
+}
+
+void FB_GetDisplayModes(_THIS, SDL_VideoDisplay *display) {
+	/* Only one display mode available, the current one */
+	SDL_AddDisplayMode(display, &display->current_mode);
+}
+
+int FB_SetDisplayMode(_THIS, SDL_VideoDisplay *display, SDL_DisplayMode *mode) {
+	return 0;
+}
+
+int FB_CreateWindow(_THIS, SDL_Window *window) {
+	SDL_WindowData *wdata;
+	SDL_VideoDisplay *display;
+
+	/* Allocate window internal data */
+	wdata = (SDL_WindowData *) SDL_calloc(1, sizeof(SDL_WindowData));
+	if (wdata == NULL) {
+		return SDL_OutOfMemory();
+	}
+	display = SDL_GetDisplayForWindow(window);
+
+	/* Windows have one size for now */
+	window->w = display->desktop_mode.w;
+	window->h = display->desktop_mode.h;
+
+	/* OpenGL ES is the law here, buddy */
+	window->flags |= SDL_WINDOW_OPENGL;
+
+	if (!_this->egl_data) {
+		if (SDL_GL_LoadLibrary(NULL) < 0) {
+			return -1;
+		}
+	}
+
+	wdata->egl_surface = SDL_EGL_CreateSurface(_this, 0);
+	if (wdata->egl_surface == EGL_NO_SURFACE) {
+		return SDL_SetError("Could not create GLES window surface");
+	}
+
+	/* Setup driver data for this window */
+	window->driverdata = wdata;
+
+	/* One window, it always has focus */
+	SDL_SetMouseFocus(window);
+	SDL_SetKeyboardFocus(window);
+
+	/* Window has been successfully created */
+	return 0;
+}
+
+void FB_DestroyWindow(_THIS, SDL_Window *window) {
+	SDL_WindowData *data;
+
+	if (window->driverdata) {
+		data = (SDL_WindowData *) window->driverdata;
+		if (data->egl_surface != EGL_NO_SURFACE) {
+			SDL_EGL_DestroySurface(_this, data->egl_surface);
+			data->egl_surface = EGL_NO_SURFACE;
+		}
+		SDL_free(window->driverdata);
+		window->driverdata = NULL;
+	}
+}
+
+int FB_CreateWindowFrom(_THIS, SDL_Window *window, const void *data) {
+	return -1;
+}
+
+#if 0
+void FB_SetWindowTitle(_THIS, SDL_Window *window) {}
+void FB_SetWindowIcon(_THIS, SDL_Window *window, SDL_Surface *icon) {}
+void FB_SetWindowPosition(_THIS, SDL_Window *window) {}
+void FB_SetWindowSize(_THIS, SDL_Window *window) {}
+void FB_ShowWindow(_THIS, SDL_Window *window) {
+	SDL_SetMouseFocus(window);
+	SDL_SetKeyboardFocus(window);
+}
+void FB_HideWindow(_THIS, SDL_Window *window) {}
+void FB_RaiseWindow(_THIS, SDL_Window *window) {}
+void FB_MaximizeWindow(_THIS, SDL_Window *window) {}
+void FB_MinimizeWindow(_THIS, SDL_Window *window) {}
+void FB_RestoreWindow(_THIS, SDL_Window *window) {}
+void FB_SetWindowGrab(_THIS, SDL_Window *window, SDL_bool grabbed) {}
+#endif
+
+/*****************************************************************************/
+/* SDL Window Manager function                                               */
+/*****************************************************************************/
+SDL_bool FB_GetWindowWMInfo(_THIS, SDL_Window *window, struct SDL_SysWMinfo *info) {
+	if (info->version.major <= SDL_MAJOR_VERSION) {
+		return SDL_TRUE;
+	} else {
+		SDL_SetError("application not compiled with SDL %d.%d\n",
+					 SDL_MAJOR_VERSION, SDL_MINOR_VERSION);
+		return SDL_FALSE;
+	}
+
+	/* Failed to get window manager information */
+	return SDL_FALSE;
+}
+
+void FB_PumpEvents(_THIS) {
+#ifdef SDL_INPUT_LINUXEV
+	SDL_EVDEV_Poll();
+#endif
+}
+
+#endif /* SDL_VIDEO_DRIVER_FBDEV */
diff --git a/src/video/fbdev/SDL_fbvideo.h b/src/video/fbdev/SDL_fbvideo.h
new file mode 100644
index 0000000..d72f157
--- /dev/null
+++ b/src/video/fbdev/SDL_fbvideo.h
@@ -0,0 +1,63 @@
+#ifndef __SDL_FBVIDEO_H__
+#define __SDL_FBVIDEO_H__
+
+#include "../../SDL_internal.h"
+#include "../SDL_sysvideo.h"
+
+#include "GLES/gl.h"
+#include "EGL/egl.h"
+#include "EGL/eglext.h"
+
+typedef struct SDL_WindowData
+{
+#if SDL_VIDEO_OPENGL_EGL  
+	EGLSurface egl_surface;
+#else
+	int foo;
+#endif
+} SDL_WindowData;
+
+/****************************************************************************/
+/* SDL_VideoDevice functions declaration                                    */
+/****************************************************************************/
+
+/* Display and window functions */
+int FB_VideoInit(_THIS);
+void FB_VideoQuit(_THIS);
+void FB_GetDisplayModes(_THIS, SDL_VideoDisplay *display);
+int FB_SetDisplayMode(_THIS, SDL_VideoDisplay *display, SDL_DisplayMode *mode);
+int FB_CreateWindow(_THIS, SDL_Window *window);
+int FB_CreateWindowFrom(_THIS, SDL_Window *window, const void *data);
+#if 0
+void FB_SetWindowTitle(_THIS, SDL_Window *window);
+void FB_SetWindowIcon(_THIS, SDL_Window *window, SDL_Surface *icon);
+void FB_SetWindowPosition(_THIS, SDL_Window *window);
+void FB_SetWindowSize(_THIS, SDL_Window *window);
+void FB_ShowWindow(_THIS, SDL_Window *window);
+void FB_HideWindow(_THIS, SDL_Window *window);
+void FB_RaiseWindow(_THIS, SDL_Window *window);
+void FB_MaximizeWindow(_THIS, SDL_Window *window);
+void FB_MinimizeWindow(_THIS, SDL_Window *window);
+void FB_RestoreWindow(_THIS, SDL_Window *window);
+void FB_SetWindowGrab(_THIS, SDL_Window *window, SDL_bool grabbed);
+#endif
+void FB_DestroyWindow(_THIS, SDL_Window *window);
+
+/* Window manager function */
+SDL_bool FB_GetWindowWMInfo(_THIS, SDL_Window *window, struct SDL_SysWMinfo *info);
+
+/* OpenGL/OpenGL ES functions */
+int FB_GLES_LoadLibrary(_THIS, const char *path);
+void *FB_GLES_GetProcAddress(_THIS, const char *proc);
+void FB_GLES_UnloadLibrary(_THIS);
+SDL_GLContext FB_GLES_CreateContext(_THIS, SDL_Window *window);
+int FB_GLES_MakeCurrent(_THIS, SDL_Window *window, SDL_GLContext context);
+int FB_GLES_SetSwapInterval(_THIS, int interval);
+int FB_GLES_GetSwapInterval(_THIS);
+int FB_GLES_SwapWindow(_THIS, SDL_Window *window);
+void FB_GLES_DeleteContext(_THIS, SDL_GLContext context);
+
+/* Event functions */
+void FB_PumpEvents(_THIS);
+
+#endif /* __SDL_FBVIDEO_H__ */
-- 
2.29.0

